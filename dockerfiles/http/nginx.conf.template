user cwww;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex on; # set to 'off' if nginx worker_processes == 1
  use epoll;
}

http {
  server_tokens off;

  include /etc/nginx/mime.types;

  default_type application/octet-stream;

  charset_types
    text/css
    text/plain
    text/vnd.wap.wml
    application/javascript
    application/json
    application/rss+xml
    application/xml;

  access_log /var/log/nginx/access.log combined;

  keepalive_timeout 20s;

  sendfile ${SENDFILE_STATUS};
  sendfile_max_chunk 512k;

  large_client_header_buffers 4 16k;

  # SSL
  ssl_certificate /etc/ssl/certs/fullchain.pem;
  ssl_certificate_key /etc/ssl/private/privkey.pem;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
  ssl_prefer_server_ciphers off;
  ssl_dhparam /etc/ssl/private/dhparams.pem;

  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:10m;
  ssl_session_tickets off;

  tcp_nopush      on;

  gzip on;
  gzip_comp_level    5;
  gzip_min_length    256;
  gzip_proxied       any;
  gzip_vary          on;
  gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/ld+json
    application/manifest+json
    application/rss+xml
    application/vnd.geo+json
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/opentype
    image/bmp
    image/svg+xml
    image/x-icon
    text/cache-manifest
    text/css
    text/plain
    text/vcard
    text/vnd.rim.location.xloc
    text/vtt
    text/x-component
    text/x-cross-domain-policy;

  upstream app_server {
    server web:8000;
  }

  upstream workstations_http {
    server ${WORKSTATION_PROXY_HOSTNAME}:${WORKSTATION_PROXY_HTTP_PORT};
  }

  upstream workstations_websocket {
    server ${WORKSTATION_PROXY_HOSTNAME}:${WORKSTATION_PROXY_WEBSOCKET_PORT};
  }

  server {
    # Redirect everything to https
    listen 80;
    listen [::]:80;

    server_name .${SERVER_NAME};

    location / {
        rewrite ^ https://$host$request_uri? permanent;
    }

    # for certbot challenges
    location ~ /.well-known/acme-challenge {
        allow all;
        root /data/letsencrypt;
    }
  }

  server {
    # Remove the www and mobile subdomains
    listen 443 ssl;
    listen [::]:443 ssl;

    server_name www.${SERVER_NAME} mobile.${SERVER_NAME} m.${SERVER_NAME};

    return 301 $scheme://${SERVER_NAME}$request_uri;
  }

  server {
    listen 9113;
    listen [::]:9113;

    server_name http;

    stub_status;
  }

  server {
    # Try to serve files, otherwise proxy to app
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;

    client_body_buffer_size 16m;
    client_max_body_size 16m;

    server_name .${SERVER_NAME};

    location ~* ^/all_challenges/?$ {
      return 301 $scheme://${SERVER_NAME}/challenges/;
    }

    location =/ping {
      # Used for determining if a workstation rendering region is active

      add_header 'Access-Control-Allow-Origin' '*';

      expires -1;

      add_header Content-Type text/plain;
      return 200 'healthy';
    }

    location =/Settings/webSocketPort {
      # MeVisLab will query this endpoint to find out how to connect to the
      # websocket. It assumes that each worker gets its own host, which is
      # not the case on grand challenge, so we need to return a relative path
      # which we get from the http_referer

      set $ref "/";

      if ($http_referer ~ ^https://[^/]*(/workstations/[^/]*/sessions/[^/]*)/.*$) {
        set $ref $1;
      }

      expires epoch;
      add_header Content-Type text/plain;
      return 200 '443$ref';
    }

    location ~ ^/workstation-proxy/([^/]*)/(.*)mlab4d4c4142/(.*)$ {
      # MeVisLab uses a magic string to determine if this should
      # be routed to the websocket handler, this is handled here

      internal;

      proxy_buffering off;
      proxy_set_header Host $1;
      proxy_pass http://workstations_websocket/mlab4d4c4142/$3;

      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # Websocket support
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";

      # Disable proxy caching
      proxy_cache off;
    }

    location ~ ^/workstation-proxy/([^/]*)/(.*)$ {
      internal;

      proxy_buffering off;
      proxy_set_header Host $1;
      proxy_pass http://workstations_http/$2;
    }

    location / {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $host;
      proxy_redirect off;
      proxy_pass http://app_server;
    }

    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /http/;
    }
  }
}
