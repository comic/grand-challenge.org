name: CI

on: [push, pull_request]

env:
  PYTHON_VERSION: '3.8'

jobs:

  precommit:
    runs-on: ubuntu-latest
    steps:
      - name: Install Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions/checkout@v1
      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          python -m pip install pre-commit virtualenv!=20.0.6
          pre-commit install
      - name: Run static code inspections
        run: pre-commit run --all-files

  django-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install codecov dependencies
        run: |
          python -m pip install codecov pytest-cov
          mkdir -p /tmp/coverage
          chmod a+w /tmp/coverage
      - uses: actions/checkout@v1
      - name: Set the environment
        run: |
          echo "GIT_COMMIT_ID=$(git describe --always --dirty)" >> $GITHUB_ENV
          echo "GIT_BRANCH_NAME=$(echo ${{ github.ref }} | cut -d/ -f3- | sed "s/[^[:alnum:]]//g")" >> $GITHUB_ENV
          echo "DOCKER_GID=$(getent group docker | cut -d: -f3)" >> $GITHUB_ENV
      - name: Build the test container
        run: |
          make build_web_test
      - name: Run the django tests
        run: |
          docker pull crccheck/hello-world
          docker-compose run --rm -v /tmp/coverage:/tmp/coverage web bash -c "COVERAGE_FILE=/tmp/coverage/.coverage.non-transactions pytest --cov-report= --cov=. --durations 10"
      - name: Upload coverage report to codecov
        run: |
          coverage combine /tmp/coverage/
          codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set the environment
        run: |
          echo "GIT_COMMIT_ID=$(git describe --always --dirty)" >> $GITHUB_ENV
          echo "GIT_BRANCH_NAME=$(echo ${{ github.ref }} | cut -d/ -f3- | sed "s/[^[:alnum:]]//g")" >> $GITHUB_ENV
          echo "DOCKER_GID=$(getent group docker | cut -d: -f3)" >> $GITHUB_ENV
      - name: Build the test container
        run: |
          make build_web_test
      - name: Build the docs
        run: |
          make docs
      - name: Deploy the documentation on master
        if: github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./app/docs/_build/html

  deploy:
    needs: [django-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v1
      - name: Set the environment
        run: |
          echo "GIT_COMMIT_ID=$(git describe --always --dirty)" >> $GITHUB_ENV
          echo "GIT_BRANCH_NAME=$(echo ${{ github.ref }} | cut -d/ -f3- | sed "s/[^[:alnum:]]//g")" >> $GITHUB_ENV
          echo "DOCKER_GID=$(getent group docker | cut -d: -f3)" >> $GITHUB_ENV
      - name: Build the distributable containers
        run: |
          make build
      - name: Push to ECR
        run: |
          aws ecr-public get-login-password | docker login --username AWS --password-stdin ${GRAND_CHALLENGE_WEB_BASE_REGISTRY_ENDPOINT}
          make push_web_base
          aws ecr-public get-login-password | docker login --username AWS --password-stdin ${GRAND_CHALLENGE_WEB_TEST_BASE_REGISTRY_ENDPOINT}
          make push_web_test_base
          aws ecr-public get-login-password | docker login --username AWS --password-stdin ${GRAND_CHALLENGE_WEB_REGISTRY_ENDPOINT}
          make push_web
          aws ecr-public get-login-password | docker login --username AWS --password-stdin ${GRAND_CHALLENGE_HTTP_REGISTRY_ENDPOINT}
          make push_http
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GRAND_CHALLENGE_HTTP_REGISTRY_ENDPOINT: ${{ secrets.GRAND_CHALLENGE_HTTP_REGISTRY_ENDPOINT }}
          GRAND_CHALLENGE_HTTP_REPOSITORY_URI: ${{ secrets.GRAND_CHALLENGE_HTTP_REPOSITORY_URI }}
          GRAND_CHALLENGE_WEB_REGISTRY_ENDPOINT: ${{ secrets.GRAND_CHALLENGE_WEB_REGISTRY_ENDPOINT }}
          GRAND_CHALLENGE_WEB_REPOSITORY_URI: ${{ secrets.GRAND_CHALLENGE_WEB_REPOSITORY_URI }}
          GRAND_CHALLENGE_WEB_BASE_REGISTRY_ENDPOINT: ${{ secrets.GRAND_CHALLENGE_WEB_BASE_REGISTRY_ENDPOINT }}
          GRAND_CHALLENGE_WEB_BASE_REPOSITORY_URI: ${{ secrets.GRAND_CHALLENGE_WEB_BASE_REPOSITORY_URI }}
          GRAND_CHALLENGE_WEB_TEST_BASE_REGISTRY_ENDPOINT: ${{ secrets.GRAND_CHALLENGE_WEB_TEST_BASE_REGISTRY_ENDPOINT }}
          GRAND_CHALLENGE_WEB_TEST_BASE_REPOSITORY_URI: ${{ secrets.GRAND_CHALLENGE_WEB_TEST_BASE_REPOSITORY_URI }}
