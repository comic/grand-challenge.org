@startuml
!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/release/1-0/C4_Container.puml

LAYOUT_TOP_DOWN
LAYOUT_WITH_LEGEND()

title Container diagram for grand-challenge.org

Person(clinicians, "Clinician", "User who annotates data, or has new clinical data for algorithm validation.")
Person(challenge_orgs, "Researcher", "User who poses challenges and compares state of the art algorithms.")
Person(data_scientists, "Data Scientist", "User who develops machine learning algorithms.")

System_Boundary(s1, "grand-challenge.org") {
    Container(gc_web_app, "API", "Nginx, Django", "Provides the grand challenge functionality via HTML and a REST API.")
    Container(gc_algorithm_worker, "Algorithm and Evaluation Worker", "Django, Docker, Celery, Redis", "Executes algorithm and evaluation container images on medical imaging data.")
    Container(gc_workstation_worker, "Workstation Worker", "Nginx, Django, Docker, Traefik, Celery, Redis", "Instantiates and proxies workstation container images for users.")

    Container(workstation_instance, "Web Workstation", "SPA, MeVisLab, VueJS, Docker", "Provides a web based workstation for server side rendering of medical imaging data. 1 container image per active user.")

    ContainerDb(postgres, "Database", "RDS/PostgreSQL", "Stores user information, medical imaging metadata, job results etc.")

    Container(protected_s3, "Protected Data Store", "S3/Minio", "Stores protected medical imaging objects.")
    Container(private_s3, "Private Data Store", "S3/Minio", "Stores private objects, container images etc.")
}

System_Ext(oauth, "Authentication", "Authenticates users through external providers (Google, GitHub).")
System_Ext(monitoring, "Monitoring and Alerting", "Monitors the system and sends alerts (Sentry, Prometheus).")
System_Ext(cdn, "Content Delivery Network", "Stores and serves static data (S3, CloudFront).")
System_Ext(mail, "E-mail", "Sends emails to users (SES).")

Rel(challenge_orgs, gc_web_app, "Uses", "HTTPS, HTML, JSON")
Rel(data_scientists, gc_web_app, "Uses", "HTTPS, HTML, JSON")
Rel(clinicians, gc_web_app, "Uses", "HTTPS, HTML")

Rel(gc_web_app, oauth, "Authenticates users against", "HTTPS, OAuth2")
Rel(s1, mail, "Sends emails through", "SMTP")
Rel(gc_web_app, cdn, "Sends static data to", "HTTPS")
Rel(monitoring, s1, "Scrapes monitoring endpoints of", "HTTPS")

Rel(gc_web_app, postgres, "Reads and writes to", "SSL, SQL")
Rel(gc_web_app, protected_s3, "Stores objects in, and proxies access to", "HTTPS, S3")
Rel(gc_web_app, private_s3, "Stores objects in", "HTTPS, S3")

Rel(gc_workstation_worker, postgres, "Reads and writes to", "SSL, SQL")
Rel(gc_workstation_worker, private_s3, "Fetches container images from", "HTTPS, S3")
Rel_Neighbor(gc_workstation_worker, workstation_instance, "Instantiates and proxies", "HTTPS, Docker")
Rel_U(gc_workstation_worker, clinicians, "Provides SPA workstation to", "HTTPS, WSS, HTML, JSON")

Rel_U(gc_algorithm_worker, postgres, "Reads and writes to", "SSL, SQL")
Rel_U(gc_algorithm_worker, private_s3, "Fetches container images from", "HTTPS, S3")
Rel_U(gc_algorithm_worker, protected_s3, "Reads objects from", "HTTPS, S3")
@enduml
