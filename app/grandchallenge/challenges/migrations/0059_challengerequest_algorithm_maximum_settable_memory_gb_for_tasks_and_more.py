# Generated by Django 4.2.24 on 2025-10-22 15:54

from django.db import migrations, models

import grandchallenge.core.validators


class Migration(migrations.Migration):

    dependencies = [
        ("challenges", "0058_alter_challenge_educational"),
    ]

    operations = [
        migrations.AddField(
            model_name="challengerequest",
            name="algorithm_maximum_settable_memory_gb_for_tasks",
            field=models.JSONField(
                default=list,
                help_text="Maximum amount of main memory (DRAM) that participants will be allowed to assign to algorithm inference jobs for submission.",
            ),
        ),
        migrations.AddField(
            model_name="challengerequest",
            name="algorithm_selectable_gpu_type_choices_for_tasks",
            field=models.JSONField(
                default=list,
                help_text='The GPU type choices that participants will be able to select for their algorithm inference jobs, for each task. Options are ["", "A100", "A10G", "V100", "K80", "T4"].',
                validators=[
                    grandchallenge.core.validators.JSONValidator(
                        schema={
                            "$schema": "http://json-schema.org/draft-07/schema",
                            "items": {
                                "items": {
                                    "enum": [
                                        "",
                                        "A100",
                                        "A10G",
                                        "V100",
                                        "K80",
                                        "T4",
                                    ],
                                    "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": True,
                            },
                            "title": "The Selectable GPU Types Schema",
                            "type": "array",
                        }
                    )
                ],
            ),
        ),
        migrations.AddField(
            model_name="challengerequest",
            name="average_size_test_image_mb_for_tasks",
            field=models.JSONField(
                default=list,
                help_text="Average size of a test image in MB, for each task.",
                validators=[
                    grandchallenge.core.validators.JSONValidator(
                        schema={
                            "$schema": "http://json-schema.org/draft-07/schema",
                            "items": {
                                "maximum": 10000,
                                "minimum": 1,
                                "type": "integer",
                            },
                            "type": "array",
                        }
                    )
                ],
            ),
        ),
        migrations.AddField(
            model_name="challengerequest",
            name="inference_time_average_minutes_for_tasks",
            field=models.JSONField(
                default=list,
                help_text="Average run time per algorithm job in minutes, for each task.",
                validators=[
                    grandchallenge.core.validators.JSONValidator(
                        schema={
                            "$schema": "http://json-schema.org/draft-07/schema",
                            "items": {
                                "maximum": 60,
                                "minimum": 5,
                                "type": "integer",
                            },
                            "type": "array",
                        }
                    )
                ],
            ),
        ),
        migrations.AddField(
            model_name="challengerequest",
            name="number_of_submissions_per_team_for_phases",
            field=models.JSONField(
                default=list,
                help_text="Number of submissions per team for each phase",
                validators=[
                    grandchallenge.core.validators.JSONValidator(
                        schema={
                            "$schema": "http://json-schema.org/draft-07/schema",
                            "items": {"minimum": 1, "type": "integer"},
                            "type": "array",
                        }
                    )
                ],
            ),
        ),
        migrations.AddField(
            model_name="challengerequest",
            name="number_of_teams_for_phases",
            field=models.JSONField(
                default=list,
                help_text="Number of teams for each phase",
                validators=[
                    grandchallenge.core.validators.JSONValidator(
                        schema={
                            "$schema": "http://json-schema.org/draft-07/schema",
                            "items": {"minimum": 1, "type": "integer"},
                            "type": "array",
                        }
                    )
                ],
            ),
        ),
        migrations.AddField(
            model_name="challengerequest",
            name="number_of_test_images_for_phases",
            field=models.JSONField(
                default=list,
                help_text="Number of test images for each phase.",
                validators=[
                    grandchallenge.core.validators.JSONValidator(
                        schema={
                            "$schema": "http://json-schema.org/draft-07/schema",
                            "items": {"minimum": 1, "type": "integer"},
                            "type": "array",
                        }
                    )
                ],
            ),
        ),
        migrations.AddField(
            model_name="challengerequest",
            name="task_id_for_phases",
            field=models.JSONField(
                default=list,
                help_text="Indicate which phase belongs to which task, e.g. [1, 1, 2, 2] means the first two phases below to task 1, the last two phases below to task 2.",
                validators=[
                    grandchallenge.core.validators.JSONValidator(
                        schema={
                            "$schema": "http://json-schema.org/draft-07/schema",
                            "items": {"type": "integer"},
                            "type": "array",
                        }
                    )
                ],
            ),
        ),
        migrations.AddField(
            model_name="challengerequest",
            name="task_ids",
            field=models.JSONField(
                default=list,
                help_text="List the task id's, e.g. [1, 2, 3].",
                validators=[
                    grandchallenge.core.validators.JSONValidator(
                        schema={
                            "$schema": "http://json-schema.org/draft-07/schema",
                            "items": {"type": "integer"},
                            "type": "array",
                            "uniqueItems": True,
                        }
                    )
                ],
            ),
        ),
    ]
