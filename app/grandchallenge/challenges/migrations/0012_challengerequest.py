# Generated by Django 3.2.10 on 2022-02-25 09:30

import re

import django.contrib.postgres.fields.citext
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import grandchallenge.challenges.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("task_categories", "0001_initial"),
        ("anatomy", "0001_initial"),
        ("modalities", "0001_initial"),
        ("challenges", "0011_challenge_access_request_handling"),
    ]

    operations = [
        migrations.CreateModel(
            name="ChallengeRequest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("status", models.BooleanField(blank=True, null=True)),
                (
                    "title",
                    models.CharField(
                        default="",
                        help_text="The name of the planned challenge.",
                        max_length=64,
                    ),
                ),
                (
                    "challenge_short_name",
                    django.contrib.postgres.fields.citext.CICharField(
                        help_text="Short name that will be used in url, specific css, files etc. should the challenge be accepted. No spaces and special characters allowed.",
                        max_length=50,
                        unique=True,
                        validators=[
                            grandchallenge.challenges.models.validate_nounderscores,
                            django.core.validators.RegexValidator(
                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                "invalid",
                            ),
                            grandchallenge.challenges.models.validate_short_name,
                        ],
                    ),
                ),
                (
                    "abstract",
                    models.TextField(
                        help_text="Provide a summary of the challenge purpose. This should include a general introduction to the topic from both a biomedical as well as from a technical point of view and clearly state the envisioned technical and/or biomedical impact of the challenge."
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        help_text="Please provide an email that our team can use to get in touch with you should there be any questions about your request.",
                        max_length=254,
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Estimated start date for this challenge."
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        help_text="Estimated end date for this challenge."
                    ),
                ),
                (
                    "organizers",
                    models.CharField(
                        help_text="Provide information about the organizing team (names and affiliations)",
                        max_length=1024,
                    ),
                ),
                (
                    "affiliated_event",
                    models.CharField(
                        blank=True,
                        help_text="Is this challenge part of a workshop or conference? If so, which one?",
                        max_length=50,
                    ),
                ),
                (
                    "challenge_type",
                    models.CharField(
                        choices=[
                            ("TYPE_1", "Type 1 - prediction submission"),
                            ("TYPE_2", "Type 2 - algorithm submission"),
                        ],
                        default="TYPE_2",
                        help_text="What type is this challenge?",
                        max_length=10,
                    ),
                ),
                (
                    "challenge_setup",
                    models.TextField(
                        help_text="Describe the challenge set-up.How many tasks and phases (preliminary, final) does the challenge have?"
                    ),
                ),
                (
                    "data_set",
                    models.TextField(
                        help_text="Describe the training and test datasets you are planning to use."
                    ),
                ),
                (
                    "submission_assessment",
                    models.TextField(
                        help_text="Define the metrics you will use to assess and rank participants’ submissions."
                    ),
                ),
                (
                    "challenge_publication",
                    models.TextField(
                        help_text="Please indicate if you plan to coordinate a publicationof the challenge results."
                    ),
                ),
                (
                    "code_availability",
                    models.TextField(
                        help_text="Will the participants’ code be accessible after the challenge?"
                    ),
                ),
                (
                    "expected_number_of_teams",
                    models.IntegerField(
                        help_text="How many teams do you expect to participate in your challenge?"
                    ),
                ),
                (
                    "average_algorithm_container_size",
                    models.IntegerField(
                        default=10,
                        help_text="Average algorithm container size in GB.",
                    ),
                ),
                (
                    "average_number_of_containers_per_team",
                    models.IntegerField(
                        default=10,
                        help_text="Average number of algorithm containers per team.",
                    ),
                ),
                (
                    "inference_time_limit",
                    models.IntegerField(
                        blank=True,
                        help_text="Time limit per inference job in minutes.",
                        null=True,
                    ),
                ),
                (
                    "average_size_of_test_image",
                    models.IntegerField(
                        blank=True,
                        help_text="Average size of a test image in MB.",
                        null=True,
                    ),
                ),
                (
                    "phase_1_number_of_submissions_per_team",
                    models.IntegerField(
                        blank=True,
                        help_text="How many submissions will teams be allowed to make to this phase?",
                        null=True,
                    ),
                ),
                (
                    "phase_2_number_of_submissions_per_team",
                    models.IntegerField(
                        blank=True,
                        help_text="How many submissions will teams be allowed to make to this phase?",
                        null=True,
                    ),
                ),
                (
                    "phase_1_number_of_test_images",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of test images for this phase.",
                        null=True,
                    ),
                ),
                (
                    "phase_2_number_of_test_images",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of test images for this phase.",
                        null=True,
                    ),
                ),
                (
                    "number_of_tasks",
                    models.IntegerField(
                        default=1,
                        help_text="If your challenge has multiple tasks, we multiply the phase 1 and 2 cost estimates by the number of tasks. For that to work, please provide the average number of test images and the average number of submissions across tasks for the two phases below. For examples check here. ",
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "modalities",
                    models.ManyToManyField(
                        blank=True,
                        help_text="What imaging modalities are used in this challenge?",
                        to="modalities.ImagingModality",
                    ),
                ),
                (
                    "structures",
                    models.ManyToManyField(
                        blank=True,
                        help_text="What structures are used in this challenge?",
                        to="anatomy.BodyStructure",
                    ),
                ),
                (
                    "task_types",
                    models.ManyToManyField(
                        blank=True,
                        help_text="What type of task is this challenge?",
                        to="task_categories.TaskType",
                    ),
                ),
            ],
        ),
    ]
