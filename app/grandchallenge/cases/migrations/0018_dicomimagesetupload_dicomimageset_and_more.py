# Generated by Django 4.2.23 on 2025-09-10 13:53

import uuid

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import grandchallenge.core.validators


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        (
            "uploads",
            "0009_useruploadgroupobjectpermission_uploads_use_group_i_53998e_idx",
        ),
        (
            "cases",
            "0017_remove_imagefile_post_processed_postprocessimagetask_and_more",
        ),
    ]

    operations = [
        migrations.CreateModel(
            name="DICOMImageSetUpload",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("INITIALIZED", "Initialized"),
                            ("STARTED", "Started"),
                            ("FAILED", "Failed"),
                            ("COMPLETED", "Completed"),
                        ],
                        default="INITIALIZED",
                        max_length=11,
                    ),
                ),
                (
                    "error_message",
                    models.TextField(default="", editable=False),
                ),
                (
                    "internal_failure_log",
                    models.JSONField(
                        default=list,
                        editable=False,
                        help_text="Contents of failure.ndjson from the health imaging import job if the job failed or did not pass validation.",
                        validators=[
                            grandchallenge.core.validators.JSONValidator(
                                schema={
                                    "$schema": "http://json-schema.org/draft-07/schema",
                                    "items": {
                                        "properties": {
                                            "exception": {
                                                "properties": {
                                                    "exceptionType": {
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    },
                                                },
                                                "required": [
                                                    "exceptionType",
                                                    "message",
                                                ],
                                                "type": "object",
                                            },
                                            "inputFile": {"type": "string"},
                                        },
                                        "required": ["inputFile", "exception"],
                                        "type": "object",
                                    },
                                    "type": "array",
                                }
                            )
                        ],
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_uploads",
                    models.ManyToManyField(
                        blank=True,
                        related_name="dicom_import_jobs",
                        to="uploads.userupload",
                    ),
                ),
            ],
            options={
                "verbose_name": "DICOM image set upload",
            },
        ),
        migrations.CreateModel(
            name="DICOMImageSet",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "image_set_id",
                    models.CharField(
                        help_text="The ID of the image set in AWS Health Imaging.",
                        max_length=32,
                        unique=True,
                    ),
                ),
                (
                    "dicom_image_set_upload",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="dicom_image_set",
                        to="cases.dicomimagesetupload",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="image",
            name="dicom_image_set",
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="image",
                to="cases.dicomimageset",
            ),
        ),
        migrations.AddIndex(
            model_name="dicomimagesetupload",
            index=models.Index(
                fields=["status"], name="cases_dicom_status_957c53_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="dicomimagesetupload",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "status__in",
                        ["INITIALIZED", "STARTED", "FAILED", "COMPLETED"],
                    )
                ),
                name="dicomuimagesetupload_status_valid",
            ),
        ),
    ]
